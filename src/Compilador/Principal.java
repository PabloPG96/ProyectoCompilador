package Compilador;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.ImageIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.text.DefaultEditorKit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;

import javax.swing.undo.UndoManager;

//https://www.youtube.com/watch?v=HLVmxFNybC8&t=924s
/**
 *
 * @author chris
 */
public class Principal extends javax.swing.JFrame {

    private File currentFile = null;
    ArrayList<String[]> tablaSimbolos = null;
    private UndoManager undoManager = new UndoManager();
    private int fontSize = 12;
    public boolean banTabla=false;
    public String tabla="";

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        //Colocar icono al JFrame
        setIconImage(new ImageIcon(getClass().getResource("/Icons/terminal-cuadrado.png")).getImage());
        NumeroLinea numLinea = new NumeroLinea(textoDocumento);
        scrollTexto.setRowHeaderView(numLinea);
        lblError.setVisible(false);
        textoErrores.setVisible(false);
        scrollErrores.setVisible(false);
        btnCopiar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        principal = new javax.swing.JPanel();
        lblCodigointermedio = new javax.swing.JLabel();
        scrollTexto = new javax.swing.JScrollPane();
        textoDocumento = new javax.swing.JTextArea();
        scrollAnalisisLexico = new javax.swing.JScrollPane();
        textAnalisisLexico = new javax.swing.JTextArea();
        scrollAnalisisSintactico = new javax.swing.JScrollPane();
        textoAnalisisSintactico = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jlabelAbrir = new javax.swing.JLabel();
        jlabelNuevo = new javax.swing.JLabel();
        jlabelGuardar = new javax.swing.JLabel();
        jlabelCerrar = new javax.swing.JLabel();
        deshacer = new javax.swing.JLabel();
        copiar = new javax.swing.JLabel();
        rehacer = new javax.swing.JLabel();
        cortar = new javax.swing.JLabel();
        pegar = new javax.swing.JLabel();
        acercar = new javax.swing.JLabel();
        alejar = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSintac1 = new javax.swing.JLabel();
        scrollErrores = new javax.swing.JScrollPane();
        textoErrores = new javax.swing.JTextArea();
        scrollCI = new javax.swing.JScrollPane();
        textoCodigoIntermedio = new javax.swing.JTextArea();
        lblError = new javax.swing.JLabel();
        btnCopiar = new javax.swing.JButton();
        menuBarra = new javax.swing.JMenuBar();
        MenuOp1 = new javax.swing.JMenu();
        subMenuNuevo = new javax.swing.JMenuItem();
        subMenuAbrir = new javax.swing.JMenuItem();
        subMenuGuardar = new javax.swing.JMenuItem();
        subMenuCerrar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        subMenuSalir = new javax.swing.JMenuItem();
        MenuOp2 = new javax.swing.JMenu();
        subMenuDeshacer = new javax.swing.JMenuItem();
        subMenuRehacer = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        subMenuCortar = new javax.swing.JMenuItem();
        subMenuCopiar = new javax.swing.JMenuItem();
        subMenuPegar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        subMenuAcercar = new javax.swing.JMenuItem();
        subMenuAlejar = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        principal.setBackground(new java.awt.Color(255, 255, 255));
        principal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCodigointermedio.setBackground(new java.awt.Color(249, 249, 249));
        lblCodigointermedio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCodigointermedio.setText("Codigo Intermedio");
        lblCodigointermedio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblCodigointermedio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCodigointermedio.setOpaque(true);
        lblCodigointermedio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCodigointermedioMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCodigointermedioMouseEntered(evt);
            }
        });
        principal.add(lblCodigointermedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 360, 140, 20));

        scrollTexto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        textoDocumento.getDocument().addUndoableEditListener(undoManager);
        textoDocumento.setColumns(20);
        textoDocumento.setRows(5);
        scrollTexto.setViewportView(textoDocumento);

        principal.add(scrollTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 440, 450));

        textAnalisisLexico.setColumns(20);
        textAnalisisLexico.setRows(5);
        textAnalisisLexico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        textAnalisisLexico.setFocusable(false);
        scrollAnalisisLexico.setViewportView(textAnalisisLexico);

        principal.add(scrollAnalisisLexico, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, 260, 140));

        scrollAnalisisSintactico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        textoAnalisisSintactico.setColumns(20);
        textoAnalisisSintactico.setRows(5);
        textoAnalisisSintactico.setFocusable(false);
        scrollAnalisisSintactico.setViewportView(textoAnalisisSintactico);

        principal.add(scrollAnalisisSintactico, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, 260, 140));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jlabelAbrir.setBackground(new java.awt.Color(255, 255, 255));
        jlabelAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/abrir.png"))); // NOI18N
        jlabelAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jlabelAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelAbrirMouseClicked(evt);
            }
        });
        jPanel1.add(jlabelAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jlabelNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/nuevo.png"))); // NOI18N
        jlabelNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jlabelNuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelNuevoMouseClicked(evt);
            }
        });
        jPanel1.add(jlabelNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, -1));

        jlabelGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/guardar.png"))); // NOI18N
        jlabelGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jlabelGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelGuardarMouseClicked(evt);
            }
        });
        jPanel1.add(jlabelGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 10, 30, -1));

        jlabelCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cerrar.png"))); // NOI18N
        jlabelCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jlabelCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabelCerrarMouseClicked(evt);
            }
        });
        jPanel1.add(jlabelCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 10, -1, -1));

        deshacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/deshacer.png"))); // NOI18N
        deshacer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deshacer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deshacerMouseClicked(evt);
            }
        });
        jPanel1.add(deshacer, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        copiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/copiar.png"))); // NOI18N
        copiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        copiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copiarMouseClicked(evt);
            }
        });
        jPanel1.add(copiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        rehacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/rehacer.png"))); // NOI18N
        rehacer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rehacer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rehacerMouseClicked(evt);
            }
        });
        jPanel1.add(rehacer, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 10, -1, -1));

        cortar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cortar.png"))); // NOI18N
        cortar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cortar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cortarMouseClicked(evt);
            }
        });
        jPanel1.add(cortar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        pegar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/pegar.png"))); // NOI18N
        pegar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pegar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pegarMouseClicked(evt);
            }
        });
        jPanel1.add(pegar, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 10, -1, -1));

        acercar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/acercar.png"))); // NOI18N
        acercar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        acercar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acercarMouseClicked(evt);
            }
        });
        jPanel1.add(acercar, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 10, -1, -1));

        alejar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/alejar.png"))); // NOI18N
        alejar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alejar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alejarMouseClicked(evt);
            }
        });
        jPanel1.add(alejar, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/run.png"))); // NOI18N
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        jLabel2.setBackground(new java.awt.Color(249, 249, 249));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Analisis Lexico");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setOpaque(true);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 22, 100, 20));

        principal.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 50));

        btnSintac1.setBackground(new java.awt.Color(249, 249, 249));
        btnSintac1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnSintac1.setText("Recorrido Sintáctico LR");
        btnSintac1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnSintac1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSintac1.setOpaque(true);
        btnSintac1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSintac1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSintac1MouseEntered(evt);
            }
        });
        principal.add(btnSintac1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 190, 140, 20));

        scrollErrores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        textoErrores.setColumns(20);
        textoErrores.setRows(5);
        textoErrores.setFocusable(false);
        scrollErrores.setViewportView(textoErrores);

        principal.add(scrollErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 380, 200, 140));

        scrollCI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        textoCodigoIntermedio.setColumns(20);
        textoCodigoIntermedio.setRows(5);
        textoCodigoIntermedio.setFocusable(false);
        scrollCI.setViewportView(textoCodigoIntermedio);

        principal.add(scrollCI, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 380, 200, 140));

        lblError.setBackground(new java.awt.Color(249, 249, 249));
        lblError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblError.setText("Errores");
        lblError.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblError.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblError.setOpaque(true);
        lblError.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblErrorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblErrorMouseEntered(evt);
            }
        });
        principal.add(lblError, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 360, 140, 20));

        btnCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/copiar.png"))); // NOI18N
        btnCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopiarActionPerformed(evt);
            }
        });
        principal.add(btnCopiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 480, 40, 40));

        getContentPane().add(principal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 540));

        MenuOp1.setText("Archivo");
        MenuOp1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MenuOp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuOp1ActionPerformed(evt);
            }
        });

        subMenuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subnuevo.png"))); // NOI18N
        subMenuNuevo.setText("Nuevo Archivo");
        subMenuNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuNuevoActionPerformed(evt);
            }
        });
        MenuOp1.add(subMenuNuevo);

        subMenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subabrir.png"))); // NOI18N
        subMenuAbrir.setText("Abrir Archivo");
        subMenuAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuAbrirActionPerformed(evt);
            }
        });
        MenuOp1.add(subMenuAbrir);

        subMenuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subguardar.png"))); // NOI18N
        subMenuGuardar.setText("Guardar");
        subMenuGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuGuardarActionPerformed(evt);
            }
        });
        MenuOp1.add(subMenuGuardar);

        subMenuCerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subcerrar.png"))); // NOI18N
        subMenuCerrar.setText("Cerrar");
        subMenuCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuCerrarActionPerformed(evt);
            }
        });
        MenuOp1.add(subMenuCerrar);
        MenuOp1.add(jSeparator1);

        subMenuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subsalir.png"))); // NOI18N
        subMenuSalir.setText("Salir");
        subMenuSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subMenuSalirMouseClicked(evt);
            }
        });
        subMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuSalirActionPerformed(evt);
            }
        });
        MenuOp1.add(subMenuSalir);

        menuBarra.add(MenuOp1);

        MenuOp2.setText("Herramientas");
        MenuOp2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        subMenuDeshacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuDeshacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subdes.png"))); // NOI18N
        subMenuDeshacer.setText("Deshacer");
        subMenuDeshacer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuDeshacerActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuDeshacer);

        subMenuRehacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuRehacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subre.png"))); // NOI18N
        subMenuRehacer.setText("Rehacer");
        subMenuRehacer.setToolTipText("");
        subMenuRehacer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuRehacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuRehacerActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuRehacer);
        MenuOp2.add(jSeparator3);

        subMenuCortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuCortar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subCortar.png"))); // NOI18N
        subMenuCortar.setText("Cortar");
        subMenuCortar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuCortarActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuCortar);

        subMenuCopiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subcopiar.png"))); // NOI18N
        subMenuCopiar.setText("Copiar");
        subMenuCopiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuCopiarActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuCopiar);

        subMenuPegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuPegar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subpegar.png"))); // NOI18N
        subMenuPegar.setText("Pegar");
        subMenuPegar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuPegarActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuPegar);
        MenuOp2.add(jSeparator2);

        subMenuAcercar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuAcercar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subacer.png"))); // NOI18N
        subMenuAcercar.setText("Acercar");
        subMenuAcercar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuAcercar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuAcercarActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuAcercar);

        subMenuAlejar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuAlejar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/subale.png"))); // NOI18N
        subMenuAlejar.setText("Alejar");
        subMenuAlejar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subMenuAlejar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuAlejarActionPerformed(evt);
            }
        });
        MenuOp2.add(subMenuAlejar);

        menuBarra.add(MenuOp2);

        setJMenuBar(menuBarra);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuSalirActionPerformed
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de cerrar el archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }
        System.exit(0);
    }//GEN-LAST:event_subMenuSalirActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        banTabla=true;
        textAnalisisLexico.setText("");
        textoAnalisisSintactico.setText("");
        textoCodigoIntermedio.setText("");
        textoErrores.setText("");
        NumeroLinea numLinea = new NumeroLinea(textoDocumento);
        textAnalisisLexico.setText("");
        //AnalisiLexico
        Analizador_Lexico lexico = new Analizador_Lexico();
        textAnalisisLexico.setText(lexico.MostrarAnalisis(textoDocumento.getText()));
        System.out.println("En principal");
        for( String x:lexico.tablaSimbolos)
            System.out.println(x);
         //System.out.println("Lexico#: " + lexico.getTokens());
         //System.out.println("Lexico#: " + lexico.getTokens());
        if (lexico.getErroresLexico().isEmpty()) {
            //AnalisisSintactico/Semantico/Generacion de codigo intermedio
            Sintactico sin_sem_cod = new Sintactico();
            sin_sem_cod.Analizar(lexico.tokensSintactico, lexico.tablaSimbolos);
            if (sin_sem_cod.isValida()){
                lblCodigointermedio.setVisible(true);
                lblError.setVisible(false);
                textoErrores.setVisible(false);
                scrollErrores.setVisible(false);
                btnCopiar.setVisible(true);
                JOptionPane.showMessageDialog(null, "Compilado correctamente");
                textoCodigoIntermedio.setText(String.join(" ", sin_sem_cod.codigoIntermedio));
                textoAnalisisSintactico.setText(String.join(" ", sin_sem_cod.Analizar(lexico.tokensSintactico, lexico.tablaSimbolos)));
            }
            else{
                lblCodigointermedio.setVisible(false);
                lblError.setVisible(true);
                textoErrores.setVisible(true);
                scrollErrores.setVisible(true);
                btnCopiar.setVisible(false);
                System.out.println("Cadena NO Válida");
                textoErrores.setText(String.join(" ", sin_sem_cod.error));
            }
        } else{
            lblCodigointermedio.setVisible(false);
            lblError.setVisible(true);
            textoErrores.setVisible(true);
            scrollErrores.setVisible(true);
            btnCopiar.setVisible(false);
            textoErrores.setText(String.join(" ", lexico.getErroresLexico()));
            JOptionPane.showMessageDialog(null, "Corrija los errores indicados", "Error", 1);
        }
        
    }//GEN-LAST:event_jLabel4MouseClicked

    private void subMenuSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subMenuSalirMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_subMenuSalirMouseClicked

    private void jlabelGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelGuardarMouseClicked
        // TODO add your handling code here:
        if (textoDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El archivo está vacío y no se puede guardar.");
            return;
        }

        if (currentFile == null) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
            fileChooser.setSelectedFile(new File("documento.txt"));
            int option = fileChooser.showSaveDialog(null);
            if (option == JFileChooser.APPROVE_OPTION) {
                currentFile = fileChooser.getSelectedFile();
                guardarArchivo(currentFile);
            }
        } else {
            guardarArchivo(currentFile);
        }
    }//GEN-LAST:event_jlabelGuardarMouseClicked

    private void guardarArchivo(File file) {
        if (textoDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El archivo está vacío y no se guardará.");
            return;
        }
        if (!file.getName().toLowerCase().endsWith(".txt")) {
            file = new File(file.getAbsolutePath() + ".txt");
        }
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(textoDocumento.getText());
            JOptionPane.showMessageDialog(null, "Archivo guardado con éxito.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error al guardar el archivo: " + ex.getMessage());
        }
    }


    private void jlabelAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelAbrirMouseClicked
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
                    fileChooser.setSelectedFile(new File("documento.txt"));
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
        int option = fileChooser.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();
            try ( BufferedReader reader = new BufferedReader(new FileReader(currentFile))) {
                textoDocumento.read(reader, null);
                textoDocumento.requestFocus();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al abrir el archivo: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jlabelAbrirMouseClicked

    private void subMenuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuGuardarActionPerformed
        // TODO add your handling code here:
        if (textoDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El archivo está vacío y no se puede guardar.");
            return;
        }

        if (currentFile == null) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
            fileChooser.setSelectedFile(new File("documento.txt"));
            int option = fileChooser.showSaveDialog(null);
            if (option == JFileChooser.APPROVE_OPTION) {
                currentFile = fileChooser.getSelectedFile();
                guardarArchivo(currentFile);
            }
        } else {
            guardarArchivo(currentFile);
        }
    }//GEN-LAST:event_subMenuGuardarActionPerformed

    private void jlabelNuevoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelNuevoMouseClicked
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
                    fileChooser.setSelectedFile(new File("documento.txt"));
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }

        // Resetear el contenido del JTextArea y la referencia al archivo actual
        textoDocumento.setText("");
        currentFile = null;
    }//GEN-LAST:event_jlabelNuevoMouseClicked

    private void jlabelCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabelCerrarMouseClicked
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
                    fileChooser.setSelectedFile(new File("documento.txt"));
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }

        // Resetear el contenido del JTextArea y la referencia al archivo actual
        textoDocumento.setText("");
        currentFile = null;
    }//GEN-LAST:event_jlabelCerrarMouseClicked

    private void subMenuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuNuevoActionPerformed
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
                    fileChooser.setSelectedFile(new File("documento.txt"));
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }

        // Resetear el contenido del JTextArea y la referencia al archivo actual
        textoDocumento.setText("");
        currentFile = null;
    }//GEN-LAST:event_subMenuNuevoActionPerformed

    private void MenuOp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuOp1ActionPerformed

    }//GEN-LAST:event_MenuOp1ActionPerformed

    private void subMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuAbrirActionPerformed
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
                    fileChooser.setSelectedFile(new File("documento.txt"));
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
        int option = fileChooser.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();
            try ( BufferedReader reader = new BufferedReader(new FileReader(currentFile))) {
                textoDocumento.read(reader, null);
                textoDocumento.requestFocus();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al abrir el archivo: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_subMenuAbrirActionPerformed

    private void subMenuCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuCerrarActionPerformed
        // TODO add your handling code here:
        if (!textoDocumento.getText().isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar cambios", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (currentFile == null) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Documentos de texto (*.txt)", "txt"));
                    fileChooser.setSelectedFile(new File("documento.txt"));
                    int option = fileChooser.showSaveDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION) {
                        currentFile = fileChooser.getSelectedFile();
                        guardarArchivo(currentFile);
                    }
                } else {
                    guardarArchivo(currentFile);
                }
            } else if (confirm == JOptionPane.CANCEL_OPTION) {
                return; // Salir si el usuario cancela
            }
        }

        // Resetear el contenido del JTextArea y la referencia al archivo actual
        textoDocumento.setText("");
        currentFile = null;
    }//GEN-LAST:event_subMenuCerrarActionPerformed

    private void lblCodigointermedioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCodigointermedioMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblCodigointermedioMouseEntered

    private void lblCodigointermedioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCodigointermedioMouseClicked
        lblCodigointermedio.setBackground(new Color(236, 236, 236));

        scrollAnalisisSintactico.setVisible(true);

    }//GEN-LAST:event_lblCodigointermedioMouseClicked

    private void subMenuDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuDeshacerActionPerformed
        // TODO add your handling code here:
        try {
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
        } catch (CannotUndoException ex) {
            JOptionPane.showMessageDialog(null, "No se puede deshacer: " + ex.getMessage());
        }
    }//GEN-LAST:event_subMenuDeshacerActionPerformed

    private void subMenuCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuCortarActionPerformed
        // TODO add your handling code here:
        textoDocumento.cut();
    }//GEN-LAST:event_subMenuCortarActionPerformed

    private void subMenuCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuCopiarActionPerformed
        // TODO add your handling code here:
        textoDocumento.copy();
    }//GEN-LAST:event_subMenuCopiarActionPerformed

    private void subMenuPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuPegarActionPerformed
        // TODO add your handling code here:
        textoDocumento.paste();
    }//GEN-LAST:event_subMenuPegarActionPerformed

    private void subMenuRehacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuRehacerActionPerformed
        // TODO add your handling code here:
        try {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        } catch (CannotRedoException ex) {
            JOptionPane.showMessageDialog(null, "No se puede rehacer: " + ex.getMessage());
        }
    }//GEN-LAST:event_subMenuRehacerActionPerformed

    private void deshacerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deshacerMouseClicked
        // TODO add your handling code here:
        try {
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
        } catch (CannotUndoException ex) {
            JOptionPane.showMessageDialog(null, "No se puede deshacer: " + ex.getMessage());
        }
    }//GEN-LAST:event_deshacerMouseClicked

    private void rehacerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rehacerMouseClicked
        // TODO add your handling code here:
        try {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        } catch (CannotRedoException ex) {
            JOptionPane.showMessageDialog(null, "No se puede rehacer: " + ex.getMessage());
        }
    }//GEN-LAST:event_rehacerMouseClicked

    private void cortarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cortarMouseClicked
        // TODO add your handling code here:
        textoDocumento.cut();
    }//GEN-LAST:event_cortarMouseClicked

    private void copiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copiarMouseClicked
        // TODO add your handling code here:
        textoDocumento.copy();
    }//GEN-LAST:event_copiarMouseClicked

    private void pegarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pegarMouseClicked
        // TODO add your handling code here:
        textoDocumento.paste();
    }//GEN-LAST:event_pegarMouseClicked

    private void subMenuAcercarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuAcercarActionPerformed
        // TODO add your handling code here:
        fontSize += 2; // Incrementar tamaño de fuente
        textoDocumento.setFont(new Font("Arial", Font.PLAIN, fontSize));
    }//GEN-LAST:event_subMenuAcercarActionPerformed

    private void subMenuAlejarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuAlejarActionPerformed
        // TODO add your handling code here:
        fontSize -= 2; // Decrementar tamaño de fuente
        if (fontSize < 2) {
            fontSize = 2; // Evitar que el tamaño de fuente sea menor que 2
        }
        textoDocumento.setFont(new Font("Arial", Font.PLAIN, fontSize));
    }//GEN-LAST:event_subMenuAlejarActionPerformed

    private void acercarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acercarMouseClicked
        // TODO add your handling code here:
        fontSize += 2; // Incrementar tamaño de fuente
        textoDocumento.setFont(new Font("Arial", Font.PLAIN, fontSize));
    }//GEN-LAST:event_acercarMouseClicked

    private void alejarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alejarMouseClicked
        // TODO add your handling code here:
        fontSize -= 2; // Decrementar tamaño de fuente
        if (fontSize < 2) {
            fontSize = 2; // Evitar que el tamaño de fuente sea menor que 2
        }
        textoDocumento.setFont(new Font("Arial", Font.PLAIN, fontSize));
    }//GEN-LAST:event_alejarMouseClicked

    private void btnSintac1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSintac1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSintac1MouseClicked

    private void btnSintac1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSintac1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSintac1MouseEntered

    private void lblErrorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblErrorMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblErrorMouseClicked

    private void lblErrorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblErrorMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblErrorMouseEntered

    private void btnCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopiarActionPerformed
        // TODO add your handling code here:
                String texto = textoCodigoIntermedio.getText(); // Obtener el texto del JTextField

                // Copiar al portapapeles
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                StringSelection seleccion = new StringSelection(texto);
                clipboard.setContents(seleccion, null);
    }//GEN-LAST:event_btnCopiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuOp1;
    private javax.swing.JMenu MenuOp2;
    private javax.swing.JLabel acercar;
    private javax.swing.JLabel alejar;
    private javax.swing.JButton btnCopiar;
    private javax.swing.JLabel btnSintac1;
    private javax.swing.JLabel copiar;
    private javax.swing.JLabel cortar;
    private javax.swing.JLabel deshacer;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel jlabelAbrir;
    private javax.swing.JLabel jlabelCerrar;
    private javax.swing.JLabel jlabelGuardar;
    private javax.swing.JLabel jlabelNuevo;
    private javax.swing.JLabel lblCodigointermedio;
    private javax.swing.JLabel lblError;
    private javax.swing.JMenuBar menuBarra;
    private javax.swing.JLabel pegar;
    private javax.swing.JPanel principal;
    private javax.swing.JLabel rehacer;
    private javax.swing.JScrollPane scrollAnalisisLexico;
    private javax.swing.JScrollPane scrollAnalisisSintactico;
    private javax.swing.JScrollPane scrollCI;
    private javax.swing.JScrollPane scrollErrores;
    private javax.swing.JScrollPane scrollTexto;
    private javax.swing.JMenuItem subMenuAbrir;
    private javax.swing.JMenuItem subMenuAcercar;
    private javax.swing.JMenuItem subMenuAlejar;
    private javax.swing.JMenuItem subMenuCerrar;
    private javax.swing.JMenuItem subMenuCopiar;
    private javax.swing.JMenuItem subMenuCortar;
    private javax.swing.JMenuItem subMenuDeshacer;
    private javax.swing.JMenuItem subMenuGuardar;
    private javax.swing.JMenuItem subMenuNuevo;
    private javax.swing.JMenuItem subMenuPegar;
    private javax.swing.JMenuItem subMenuRehacer;
    private javax.swing.JMenuItem subMenuSalir;
    private javax.swing.JTextArea textAnalisisLexico;
    private javax.swing.JTextArea textoAnalisisSintactico;
    private javax.swing.JTextArea textoCodigoIntermedio;
    private javax.swing.JTextArea textoDocumento;
    private javax.swing.JTextArea textoErrores;
    // End of variables declaration//GEN-END:variables
}
