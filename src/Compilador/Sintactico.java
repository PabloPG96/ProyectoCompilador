/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Compilador;

import java.util.ArrayList;
import java.util.Stack;

/**
 *
 * @author pablo2
 */
public class Sintactico {
    boolean valida=false, nohayerror=true, expresion=false;
    Stack<String> principal = new Stack<>();
    String columnas[]= {"Program",	"{",	"}",	"id",	"int",	"float",	"char",	"String",	",",	";",	"if",	"(",	")",	"for",	"=",	"num",	"++",	"--",	"Write",	"Read",	"cad",	"+",	"-",	">",	"<",	"!=",	"==",	">=",	"<=",	"*",	"/",	"car",	"$",	"Prog",	"P",	"Tipo",	"V",	"ESTR",	"X",	"Y",	"SEN",	"Z",	"W",	"A",	"S",	"R",	"E",	"T",	"F"};
    String filas[]=
            {
"I0",
"I1",
"I2",
"I3",
"I4",
"I5",
"I6",
"I7",
"I8",
"I9",
"I10",
"I11",
"I12",
"I13",
"I14",
"I15",
"I16",
"I17",
"I18",
"I19",
"I20",
"I21",
"I22",
"I23",
"I24",
"I25",
"I26",
"I27",
"I28",
"I29",
"I30",
"I31",
"I32",
"I33",
"I34",
"I35",
"I36",
"I37",
"I38",
"I39",
"I40",
"I41",
"I42",
"I43",
"I44",
"I45",
"I46",
"I47",
"I48",
"I49",
"I50",
"I51",
"I52",
"I53",
"I54",
"I55",
"I56",
"I57",
"I58",
"I59",
"I60",
"I61",
"I62",
"I63",
"I64",
"I65",
"I66",
"I67",
"I68",
"I69",
"I70",
"I71",
"I72",
"I73",
"I74",
"I75",
"I76",
"I77",
"I78",
"I79",
"I80",
"I81",
"I82",
"I83",
"I84",
"I85",
"I86",
"I87",
"I88",
"I89",
"I90",
"I91",
"I92",
"I93",
"I94",
"I95",
"I96",
"I97",
"I98",
"I99",
"I100",
"I101",
"I102",
"I103",
"I104",
"I105",
"I106",
"I107",
"I108",
"I109"
            };
    String acciones[][]= 
            {
{"I2",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I1",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P0",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"I3",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"I7",	"I8",	"I9",	"I10",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I4",	"I5",	"",	"I11",	"",	"",	"I6",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"I18",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I19",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P3",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"P4",	"",	"",	"",	"",	"P4",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"P5",	"",	"",	"",	"",	"P5",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"P6",	"",	"",	"",	"",	"P6",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"P7",	"",	"",	"",	"",	"P7",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"",	"",	"",	"",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I11",	"",	"",	"I20",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"",	"",	"",	"",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I11",	"",	"",	"I21",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I22",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I23",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I24",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I25",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I26",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P1",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"I28",	"I29",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I27",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P10",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P11",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I32",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I30",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"I7",	"I8",	"I9",	"I10",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I33",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I35",	"",	"",	"",	"",	"",	"",	"I34",	"",	"",	""},
{"",	"",	"",	"",	"I7",	"I8",	"I9",	"I10",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I38",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"I40",	"I41",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I39",	"",	"I42",	"I43",	"I44"},
{"",	"",	"P2",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I50",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"I7",	"I8",	"I9",	"I10",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I51",	"I5",	"",	"I11",	"",	"",	"I6",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"I53",	"",	"",	"",	"I54",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I52",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"P21",	"",	"",	"",	"P21",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"P22",	"",	"",	"",	"P22",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"I55",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I56",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I57",	"I58",	"I59",	"I60",	"I61",	"I62",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P17",	"",	"",	"P17",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P17",	"P17",	"P17",	"P17",	"P17",	"P17",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P18",	"",	"",	"P18",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P18",	"P18",	"P18",	"P18",	"P18",	"P18",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I63",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"I64",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I65",	"I43",	"I44"},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I66",	"I43",	"I44"},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P28",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I67",	"I68",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P37",	"",	"",	"P37",	"",	"",	"",	"",	"",	"",	"",	"",	"P37",	"P37",	"",	"",	"",	"",	"",	"",	"I69",	"I70",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P40",	"",	"",	"P40",	"",	"",	"",	"",	"",	"",	"",	"",	"P40",	"P40",	"",	"",	"",	"",	"",	"",	"P40",	"P40",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I71",	"I43",	"I44"},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P42",	"",	"",	"P42",	"",	"",	"",	"",	"",	"",	"",	"",	"P42",	"P42",	"",	"",	"",	"",	"",	"",	"P42",	"P42",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P43",	"",	"",	"P43",	"",	"",	"",	"",	"",	"",	"",	"",	"P43",	"P43",	"",	"",	"",	"",	"",	"",	"P43",	"P43",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P44",	"",	"",	"P44",	"",	"",	"",	"",	"",	"",	"",	"",	"P44",	"P44",	"",	"",	"",	"",	"",	"",	"P44",	"P44",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P45",	"",	"",	"P45",	"",	"",	"",	"",	"",	"",	"",	"",	"P45",	"P45",	"",	"",	"",	"",	"",	"",	"P45",	"P45",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"I28",	"I29",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I72",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P9",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"I73",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I75",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I76",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I74",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P24",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I77",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"I78",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I79",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I80",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I81",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I82",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I83",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I84",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I85",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P25",	"P25",	"",	"",	"",	"",	"",	"",	"P25",	"",	"",	"P25",	"",	"",	"",	"",	"P25",	"P25",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P26",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I67",	"I68",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P27",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I67",	"I68",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I86",	"I44"},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I87",	"I44"},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I88"},
{"",	"",	"",	"I46",	"",	"",	"",	"",	"",	"",	"",	"I45",	"",	"",	"",	"I47",	"",	"",	"",	"",	"I48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I89"},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I90",	"",	"",	"",	"",	"",	"",	"",	"",	"I67",	"I68",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"",	"",	"",	"",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I11",	"",	"",	"I91",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"I53",	"",	"",	"",	"I54",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I92",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"P21",	"",	"",	"",	"P21",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"P22",	"",	"",	"",	"P22",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I93",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"",	"",	"",	"",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I11",	"",	"",	"I94",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P29",	"",	"",	"P29",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P30",	"",	"",	"P30",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P31",	"",	"",	"P31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P32",	"",	"",	"P32",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P33",	"",	"",	"P33",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P34",	"",	"",	"P34",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I95",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P35",	"",	"",	"P35",	"",	"",	"",	"",	"",	"",	"",	"",	"P35",	"P35",	"",	"",	"",	"",	"",	"",	"I69",	"I70",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P36",	"",	"",	"P36",	"",	"",	"",	"",	"",	"",	"",	"",	"P36",	"P36",	"",	"",	"",	"",	"",	"",	"I69",	"I70",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P38",	"",	"",	"P38",	"",	"",	"",	"",	"",	"",	"",	"",	"P38",	"P38",	"",	"",	"",	"",	"",	"",	"P38",	"P38",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P39",	"",	"",	"P39",	"",	"",	"",	"",	"",	"",	"",	"",	"P39",	"P39",	"",	"",	"",	"",	"",	"",	"P39",	"P39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P41",	"",	"",	"P41",	"",	"",	"",	"",	"",	"",	"",	"",	"P41",	"P41",	"",	"",	"",	"",	"",	"",	"P41",	"P41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P12",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"P23",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"I96",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"I97",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"I98",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"",	"",	"",	"",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I11",	"",	"",	"I99",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"P15",	"P15",	"",	"",	"",	"",	"",	"",	"P15",	"",	"",	"P15",	"",	"",	"",	"",	"P15",	"P15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I35",	"",	"",	"",	"",	"",	"",	"I100",	"",	"",	""},
{"",	"",	"P13",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"I101",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"I102",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I104",	"I105",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I103",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I106",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P19",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P20",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"I107",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P14",	"I17",	"",	"",	"",	"",	"",	"",	"I15",	"",	"",	"I16",	"",	"",	"",	"",	"I13",	"I14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"I11",	"",	"",	"I108",	"",	"",	"I12",	"",	"",	"",	"",	""},
{"",	"",	"I109",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"P16",	"P16",	"",	"",	"",	"",	"",	"",	"P16",	"",	"",	"P16",	"",	"",	"",	"",	"P16",	"P16",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""}
            };
    
    String producciones[][]={
{	"P0",	"Prog'>Prog"	},
{	"P1",	"Prog>Program_{_P_}"	},
{	"P2",	"P>Tipo_id_V"	},
{	"P3",	"P>SEN"	},
{	"P4",	"Tipo>int"	},
{	"P5",	"Tipo>float"	},
{	"P6",	"Tipo>char"	},
{	"P7",	"Tipo>String"	},
{	"P8",	"V>,_id_V"	},
{	"P9",	"V>;_P"	},
{	"P10",	"SEN>ESTR_SEN"	},
{	"P11",	"SEN>A_SEN"	},
{	"P12",	"SEN>Write_(_Z_W_;_SEN"	},
{	"P13",	"SEN>Read_(_Tipo_,_id_)_;_SEN"	},
{	"P14",	"SEN>Ɛ"	},
{	"P15",	"ESTR>if_(_R_)_{_SEN_}"	},
{	"P16",	"ESTR>for_(_Tipo_id_=_X_;_R_;_id_Y_)_{_SEN_}"	},
{	"P17",	"X>num"	},
{	"P18",	"X>id"	},
{	"P19",	"Y>++"	},
{	"P20",	"Y>--"	},
{	"P21",	"Z>id"	},
{	"P22",	"Z>cad"	},
{	"P23",	"W>,_Z_W"	},
{	"P24",	"W>)"	},
{	"P25",	"A>id_=_S_;"	},
{	"P26",	"S>+_E"	},
{	"P27",	"S>-_E"	},
{	"P28",	"S>E"	},
{	"P29",	"R>X_>_X"	},
{	"P30",	"R>X_<_X"	},
{	"P31",	"R>X_!=_X"	},
{	"P32",	"R>X_==_X"	},
{	"P33",	"R>X_>=_X"	},
{	"P34",	"R>X_<=_X"	},
{	"P35",	"E>E_+_T"	},
{	"P36",	"E>E_-_T"	},
{	"P37",	"E>T"	},
{	"P38",	"T>T_*_F"	},
{	"P39",	"T>T_/_F"	},
{	"P40",	"T>F"	},
{	"P41",	"F>(_E_)"	},
{	"P42",	"F>id"	},
{	"P43",	"F>num"	},
{	"P44",	"F>cad"	},
{	"P45",	"F>car"	}
    };    
    
    
        String mapeoSemantico[][]={
        {	"0",	"1",	"-1",	"-1"},
        {	"1",	"1",	"-1",	"-1"},
        {	"-1",	"-1",	"-1",	"-1"},
        {	"-1",	"-1",	"-1",	"-1"}                
    };
    
    boolean ReglasSemanticasAsignacion[][]={
        {	true,	false,	false,	false},
        {	true,	true,	false,	false},
        {	false,	false,	true,	false},
        {	false,	false,	false,	true}
    };
   
    Stack<String> pilaSemantica = new Stack<>();
    Stack<String> pilaOperadores = new Stack<>();
    String codigoIntermedio="";
    String error="";
    Stack<String> pilaVariables = new Stack<>();
    int cont;
    boolean enWrite=false;
    boolean enRead=false; 
    boolean enIf=false;  
    boolean enFor=false;  
    
    public String Analizar(ArrayList<String> tokens, ArrayList<String> tablaSimbolosArray){
        System.out.println("\nAnalisis.Sintactico.Analizar() \n");
        valida=false;
        nohayerror=true;
        expresion=false;
        principal.clear();
        principal.push("$");
        principal.push("I0"); 
        tokens.add("$");
        int columna, fila;
        String cadRecorrido="";
        cadRecorrido+= mostrarPila(principal);
        
        String cadRecorridoSemantico="";
        String cadRecorridoOperadores="";
        String cimaPila, cimaPilaAnt, tokenAnt="", id="", num="", cad="", car="", idAsignacion="", idAsignaciontipoDato="", tipoDato="", variable="", contador="";
        codigoIntermedio="";
        int cont_ifs=1, cont_fors=1;
        
        for(int i=0, tam=tokens.size(); i<tam; i++)
        {
            boolean encontrado=false;                        
            do{
                if((tokens.get(i)).split("#")[0].equals("$") && principal.peek().equals("I1")){
                    valida=true;
                    break;
                }
                

                //Verificar el fin de la expresion
                if((tokens.get(i)).split("#")[0].equals(";") && principal.peek().equals("I39")){
                    cimaPilaAnt = pilaSemantica.pop();
                    cimaPila = pilaSemantica.pop();
                    if(!ReglasSemanticasAsignacion[Integer.parseInt(cimaPila)][Integer.parseInt(cimaPilaAnt)]){
                        System.out.println("Variable: " + idAsignacion +", no coincide con el dato asignado, Linea:" + (tokens.get(i)).split("#")[1]);
                        error="Error semantico. Variable: " + idAsignacion +", no coincide con el dato asignado, Linea:" + (tokens.get(i)).split("#")[1];
                        return cadRecorrido;
                    }                        
                    cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                    codigoIntermedio+=idAsignacion+" = "+"V"+idAsignaciontipoDato+"1"+";\n";
                    expresion=false;                    
                }        
                //FIN de verificar el fin de la expresion

                //Verificar el inicio de una expresion
                if(((tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I29") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I12") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I107") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I96") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I78") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I17") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I11") ) || ( (tokens.get(i)).split("#")[0].equals("id") && principal.peek().equals("I73") ) ){
                    System.out.println("Inicio expresion: ______________________");
                    idAsignacion=(tokens.get(i)).split("#")[2];
                    
                                boolean yaDefinida=false;

                                for(String tabla: tablaSimbolosArray){                                 
                                    if(idAsignacion.equals((tabla.split("#")[0]+"")))
                                    {
                                        idAsignaciontipoDato=((tabla.split("#")[1]+"").equals("0")) ? "d" : 
                                                            ((tabla.split("#")[1]+"").equals("1")) ? "f" : 
                                                            ((tabla.split("#")[1]+"").equals("2")) ? "c" : "s";
                                        pilaSemantica.push(tabla.split("#")[1]);
                                        yaDefinida=true;
                                        break;
                                    }
                                }
                                if(!yaDefinida){
                                    System.out.println("Variable: " + idAsignacion +", no definida, Linea:" + (tokens.get(i)).split("#")[1]);
                                    error="Error semantico. Variable: " + idAsignacion +", no definida, Linea:" + (tokens.get(i)).split("#")[1];
                                    return cadRecorrido;
                                }                    
                                cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                                
                                
                    cont=1;            
                    expresion=true;                    
                }
                //FIN de verificar el inicio de una expresion
                
                
                
                //Verificar el inicio de un read (esto para saber tipos de dato, si aplica
                if(/*Read:*/   ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I107") ) ||  ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I11") ) ||  ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I78") ) ||  ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I12") ) ||  ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I96") ) ||  ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I73") ) || ((tokens.get(i)).split("#")[0].equals("Read") && principal.peek().equals("I29") ) ){                                                        
                    System.out.println("Inicio Read: ______________________");
                    enRead=true;                    
                }
                //FIN de verificar el inicio de un Read
                //Verificar el fin de un write o read (esto para saber tipos de dato, si aplica
                if(/*Read:*/   ((tokens.get(i)).split("#")[0].equals(";") && principal.peek().equals("I93") )){                                                        
                    System.out.println("Fin Read: ______________________");
                    cimaPilaAnt = pilaSemantica.pop();
                    cimaPila = pilaSemantica.pop();
                    if(!ReglasSemanticasAsignacion[Integer.parseInt(cimaPila)][Integer.parseInt(cimaPilaAnt)]){
                        System.out.println("Variable: " + idAsignacion +", no coincide con el dato asignado, Linea:" + (tokens.get(i)).split("#")[1]);
                        error="Error semantico. Variable: " + idAsignacion +", no coincide con el dato asignado, Linea:" + (tokens.get(i)).split("#")[1];
                        return cadRecorrido;
                    }
                    enRead=false;                    
                }
                //FIN de verificar el fin de un Read 
                
                
                //Verificar el inicio de un write (esto para saber tipos de dato, si aplica
                if(/*Write:*/ ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I107") ) || ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I78") ) || ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I11") ) || ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I12") ) || ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I73") ) || ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I29") ) || ((tokens.get(i)).split("#")[0].equals("Write") && principal.peek().equals("I96") ) ){                                                        
                    System.out.println("Inicio Write: ______________________");
                    enWrite=true;                    
                }
                //FIN de verificar el inicio de una Write
                //Verificar el fin de un write (esto para saber tipos de dato, si aplica
                if(/*Write:*/   ((tokens.get(i)).split("#")[0].equals(";") && principal.peek().equals("I52") )){                                                        
                    System.out.println("Fin Write: ______________________");
                    enWrite=false;                    
                }
                //FIN de verificar el fin de una Write 
                

                //Verificar el inicio de un if
                if(/*if:*/ ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I96") ) || ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I73") ) || ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I29") ) || ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I11") ) || ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I107") ) || ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I78") ) || ((tokens.get(i)).split("#")[0].equals("if") && principal.peek().equals("I12") ) ){                                                        
                    System.out.println("Inicio if: ______________________");
                    codigoIntermedio+="Vif=";
                    enIf=true;                    
                }
                //FIN de verificar el inicio de un if
                //Verificar el fin de un if (esto para saber tipos de dato, si aplica
                if(/*if:*/   ((tokens.get(i)).split("#")[0].equals("{") && principal.peek().equals("I56") )){                                                        
                    System.out.println("Fin if: ______________________");
                    enIf=false;                    
                }
                //FIN de verificar el fin de un if
                
                
                
                //System.out.println(" - "+ i);  

                if(fil(principal.peek())==-1){
                    //ahrita vemos
                }

                
                fila = fil(principal.peek());
                columna = col((tokens.get(i)).split("#")[0]);
                
                
                System.out.println("Con: " + (tokens.get(i)).split("#")[0]+"\n");            
                System.out.println((tokens.get(i)).split("#")[0]+"  en  "+fila+" : "+ columna);            
                
                if(acciones[fila][columna].isEmpty()){
                    nohayerror=false;
                    System.out.println("Error sintactico en la linea:" + (tokenAnt).split("#")[1]+" cerca de: "+(tokenAnt).split("#")[0]);
                    error="Error sintactico. En la linea:" + (tokenAnt).split("#")[1]+" cerca de: "+(tokenAnt).split("#")[0];
                    return cadRecorrido;
                }

                if(acciones[fila][columna].startsWith("I")){
                    principal.push((tokens.get(i)).split("#")[0]);
                    principal.push(acciones[fila][columna]);
                    encontrado=true;
                    cadRecorrido+= mostrarPila(principal)+"\n";                    
                    
                    
                    //Inicio Codigo intermedio tipos de dato
                    if(acciones[fila][columna].equals("I19") && (tokens.get(i)).split("#")[0].equals("id")){
                        codigoIntermedio+=(tokens.get(i)).split("#")[2]+";\n";
                        //System.out.println("Entramos a la primer variable");
                    }
                    if(acciones[fila][columna].equals("I50") && (tokens.get(i)).split("#")[0].equals("id")){
                        codigoIntermedio+=tipoDato + (tokens.get(i)).split("#")[2]+";\n";
                        //System.out.println("Entramos a las demas variable");
                    }
                    //Fin Codigo intermedio tipos de dato
                    
                    //Inicio Codigo intermedio program inicio y fin
                    if(acciones[fila][columna].equals("I2") && (tokens.get(i)).split("#")[0].equals("Program")){
                        codigoIntermedio+="#include <stdio.h>\n"
                                + "int main()\n";
                    }
                    if(acciones[fila][columna].equals("I3") && (tokens.get(i)).split("#")[0].equals("{")){
                        codigoIntermedio+="{\n"
                                + "int Vd1;\nint Vd2;\nint Vd3;\nint Vd4;\nint Vd5;\n"
                                + "float Vf1;\nfloat Vf2;\nfloat Vf3;\nfloat Vf4;\nfloat Vf5;\n"
                                + "char Vc1;\nchar Vc2;\nchar Vc3;\n"
                                + "char *Vs1;\nchar *Vs2;\nchar *Vs3;\n"
                                + "int Vif;\nint Vfor;\n";
                    }
                    if(acciones[fila][columna].equals("I18") && (tokens.get(i)).split("#")[0].equals("}")){
                        codigoIntermedio+="return 0;\n}\n";
                    }
                    //Fin Codigo intermedio program inicio y fin
                    
                    
                    //Inicio Codigo intermedio Read
                    if(enRead && (tokens.get(i)).split("#")[0].equals("Read")){
                        codigoIntermedio+="scanf(";
                    }
                    
                    if(acciones[fila][columna].equals("I77") && (tokens.get(i)).split("#")[0].equals("id")){
                                //Verificar si existe la variable en el read;
                                boolean yaDefinida=false;
                                String tipoDatoRead="";

                                for(String tabla: tablaSimbolosArray){                                 
                                    if((tokens.get(i)).split("#")[2].equals((tabla.split("#")[0]+"")))
                                    {
                                        tipoDatoRead=tabla.split("#")[1];
                                        yaDefinida=true;
                                    }
                                }
                                if(!yaDefinida){
                                    System.out.println("Variable: " + (tokens.get(i)).split("#")[2] +", no definida, Linea:" + (tokens.get(i)).split("#")[1]);
                                    error="Error semantico. Variable: " + (tokens.get(i)).split("#")[2] +", no definida, Linea:" + (tokens.get(i)).split("#")[1];
                                    return cadRecorrido;
                                }
                        //Si existe, continuamos con el codigo intermedio
                        codigoIntermedio+= (tokens.get(i)).split("#")[2]+");\n";
                        pilaSemantica.push(tipoDatoRead);
                        //System.out.println("Entramos a las demas variable");
                    }
                    //Fin Codigo intermedio Read
                    
                    
                    //Inicio Codigo intermedio Write
                    //Para el primer argumento en el write con cad
                    if(enWrite && (tokens.get(i)).split("#")[0].equals("Write")){
                        codigoIntermedio+="printf(";
                    }
                    if(acciones[fila][columna].equals("I32") && (tokens.get(i)).split("#")[0].equals("cad")){
                        codigoIntermedio+=(tokens.get(i)).split("#")[2]+");\n";
                    }
                    //Para varios argumentos en el write con cad
                    if(acciones[fila][columna].equals("I76") && (tokens.get(i)).split("#")[0].equals("cad")){
                        codigoIntermedio+="printf("+(tokens.get(i)).split("#")[2]+");\n";
                    }
                   
                    //Para el primer argumento en el write con id
                    if(acciones[fila][columna].equals("I31") && (tokens.get(i)).split("#")[0].equals("id")){
                                //Verificar el tipo de dato del id
                                String tipoDatoRead="";

                                for(String tabla: tablaSimbolosArray){                                 
                                    if((tokens.get(i)).split("#")[2].equals((tabla.split("#")[0]+"")))
                                    {
                                        switch (tabla.split("#")[1]) {
                                            case "0":
                                                tipoDatoRead="\"%d\", ";
                                                break;
                                            case "1":
                                                tipoDatoRead="\"%f\", ";
                                                break;
                                            case "2":
                                                tipoDatoRead="\" %c\", ";
                                                break;
                                            case "3":
                                                tipoDatoRead="\"%s\", ";
                                                break;
                                            default:
                                                throw new AssertionError();
                                        }
                                        break;
                                    }
                                }
                        codigoIntermedio+=  tipoDatoRead + (tokens.get(i)).split("#")[2]+");\n";
                    }
                    //Para varios argumento en el write con id
                    if(acciones[fila][columna].equals("I75") && (tokens.get(i)).split("#")[0].equals("id")){
                                //Verificar el tipo de dato del id
                                String tipoDatoRead="";

                                for(String tabla: tablaSimbolosArray){                                 
                                    if((tokens.get(i)).split("#")[2].equals((tabla.split("#")[0]+"")))
                                    {
                                        switch (tabla.split("#")[1]) {
                                            case "0":
                                                tipoDatoRead="\"%d\", ";
                                                break;
                                            case "1":
                                                tipoDatoRead="\"%f\", ";
                                                break;
                                            case "2":
                                                tipoDatoRead="\" %c\", ";
                                                break;
                                            case "3":
                                                tipoDatoRead="\"%s\", ";
                                                break;
                                            default:
                                                throw new AssertionError();
                                        }
                                    }
                                }
                        codigoIntermedio+=  "printf(" + tipoDatoRead + (tokens.get(i)).split("#")[2]+");\n";
                    }
                    //Para el salto de linea del salto del write
                    if(acciones[fila][columna].equals("I73") && (tokens.get(i)).split("#")[0].equals(";")){
                        codigoIntermedio+="printf(\"\\n\");\n";
                    }
                    //Fin Codigo intermedio Write
                    
                    
                    //Inicio Codigo intermedio if
                    if(acciones[fila][columna].equals("I37") && (tokens.get(i)).split("#")[0].equals("id")){
                        codigoIntermedio+=(tokens.get(i)).split("#")[2];
                    }
                    if(acciones[fila][columna].equals("I36") && (tokens.get(i)).split("#")[0].equals("num")){
                        codigoIntermedio+=(tokens.get(i)).split("#")[2];
                    }
                    if(acciones[fila][columna].equals("I58") && (tokens.get(i)).split("#")[0].equals("<")){
                        codigoIntermedio+="<";
                    }
                    if(acciones[fila][columna].equals("I62") && (tokens.get(i)).split("#")[0].equals("<=")){
                        codigoIntermedio+="<=";
                    }
//                    if(acciones[fila][columna].equals("I62") && (tokens.get(i)).split("#")[0].equals(">")){//
//                        codigoIntermedio+=">";
//                    }
//                    if(acciones[fila][columna].equals("I62") && (tokens.get(i)).split("#")[0].equals(">=")){//
//                        codigoIntermedio+=">=";
//                    }
                    if(acciones[fila][columna].equals("I60") && (tokens.get(i)).split("#")[0].equals("==")){
                        codigoIntermedio+="==";
                    }
                    if(acciones[fila][columna].equals("I59") && (tokens.get(i)).split("#")[0].equals("!=")){
                        codigoIntermedio+="!=";
                    }
                    
                    if(acciones[fila][columna].equals("I78") && (tokens.get(i)).split("#")[0].equals("{")){
                        codigoIntermedio+=";\n"
                                + "if(!Vif)\n"
                                + "goto end_IF"+cont_ifs+"; \n";
                    }
                    
                    if(acciones[fila][columna].equals("I97") && (tokens.get(i)).split("#")[0].equals("}")){
                        codigoIntermedio+="goto end_IF"+cont_ifs+";\n"
                                + "end_IF"+cont_ifs+":\n";
                        cont_ifs+=1;
                    }
                    
                    
                    
                    //Inicio Codigo intermedio for
                    if(acciones[fila][columna].equals("I63") && (tokens.get(i)).split("#")[0].equals("id")){
                        codigoIntermedio+=(tokens.get(i)).split("#")[2]+";\n"
                                + (tokens.get(i)).split("#")[2];
                    }
                    if(acciones[fila][columna].equals("I85") && (tokens.get(i)).split("#")[0].equals("=")){
                        codigoIntermedio+="=";
                    }
                    if(acciones[fila][columna].equals("I98") && (tokens.get(i)).split("#")[0].equals(";")){
                        codigoIntermedio+=";\nFOR"+cont_fors+":\nVfor=";
                    }
                    if(acciones[fila][columna].equals("I101") && (tokens.get(i)).split("#")[0].equals(";")){
                        codigoIntermedio+=";\nif(!Vfor)\n"
                                + "goto Fin_For"+cont_fors+";\n";
                    }
                    if(acciones[fila][columna].equals("I102") && (tokens.get(i)).split("#")[0].equals("id")){
                        variable=(tokens.get(i)).split("#")[2];
                    }
                    if(acciones[fila][columna].equals("I104") && (tokens.get(i)).split("#")[0].equals("++")){
                        contador="Vd1="+variable+";\n"
                                + "Vd2=1;\n"
                                + "Vd1= Vd1 + Vd2;\n"
                                + variable + "= Vd1;\n"
                                + "goto FOR"+cont_fors+";\n"
                                + "Fin_For"+cont_fors+":\n";
                    }
                    if(acciones[fila][columna].equals("I105") && (tokens.get(i)).split("#")[0].equals("--")){
                        contador="Vd1="+variable+";\n"
                                + "Vd2=1;\n"
                                + "Vd1= Vd1 - Vd2;\n"
                                + variable + "= Vd1;\n"
                                + "goto FOR"+cont_fors+";\n"
                                + "Fin_For"+cont_fors+":\n";
                    }
                    if(acciones[fila][columna].equals("I109") && (tokens.get(i)).split("#")[0].equals("}")){
                        codigoIntermedio+=contador;
                    }
                    //Fin Codigo intermedio for
                    
                }

                if(acciones[fila][columna].startsWith("P")){
                    for(int j=0; j<producciones.length;j++)
                        if(acciones[fila][columna].equals(producciones[j][0])){
                            
                            if(!producciones[j][1].split(">")[1].equals("Ɛ")){                                
                                int pops=2*(producciones[j][1].split(">")[1].split("_").length);                        
                                for(int k=0; k<pops;k++){
                                    principal.pop();                                
                                }                            
                            }                            
                            
                            
                            int filaP = fil(principal.peek());
                            int columnaP = col(producciones[j][1].split(">")[0]);
                            
//                            System.out.println("  Smb  "+principal.peek()+" : "+ producciones[j][1].split(">")[0]);
//                            System.out.println("  Coordenadas  "+filaP+" : "+ columnaP);
                            
                            principal.push(producciones[j][1].split(">")[0]);
//                            System.out.println("Analisis.Sintactico.Analizar(): " + acciones[filaP][columnaP]);
                            principal.push(acciones[filaP][columnaP]);
                            cadRecorrido+= mostrarPila(principal)+"\n";
                            
                            
                            //InicioSemantico
                            if(expresion && acciones[fila][columna].equals("P42")){
                                boolean yaDefinida=false;

                                for(String tabla: tablaSimbolosArray){                                 
                                    if(id.equals((tabla.split("#")[0]+"")))
                                    {
                                        pilaSemantica.push(tabla.split("#")[1]);
                                        yaDefinida=true;
                                    }
                                }
                                if(!yaDefinida){
                                    System.out.println("Variable: " + id +", no definida, Linea:" + (tokens.get(i)).split("#")[1]);
                                    error="Error semantico. Variable: " + id +", no definida, Linea:" + (tokens.get(i)).split("#")[1];
                                    return cadRecorrido;
                                }                    
                                cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                                

                                
                                //Codigo Intermedio
                                codigoIntermedio+="V"+idAsignaciontipoDato+(cont)+" = "+id+";\n";
                                cont+=1;
                            } 
                            
                            if(expresion && acciones[fila][columna].equals("P43")){
                                pilaSemantica.push("0");                    
                                cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                                
                                //Codigo Intermedio
                                codigoIntermedio+="V"+idAsignaciontipoDato+(cont)+" = "+num+";\n";
                                cont+=1;
                            }
                            
                            if(expresion && acciones[fila][columna].equals("P44")){
                                pilaSemantica.push("3");                    
                                cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                                
                                //Codigo Intermedio
                                codigoIntermedio+="V"+idAsignaciontipoDato+(cont)+" = "+cad+";\n";
                                cont+=1;
                            }
                                                        
                            if(expresion && acciones[fila][columna].equals("P45")){
                                pilaSemantica.push("2");                    
                                cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                                
                                //Codigo Intermedio
                                codigoIntermedio+="V"+idAsignaciontipoDato+(cont)+" = "+car+";\n";
                                cont+=1;
                            }                         
                            
                            //Revisar que los id generados en write existan
                            if(acciones[fila][columna].equals("P21")){
                                boolean yaDefinida=false;

                                for(String tabla: tablaSimbolosArray){                                 
                                    if(id.equals((tabla.split("#")[0]+"")))
                                    {
                                        yaDefinida=true;
                                    }
                                }
                                if(!yaDefinida){
                                    System.out.println("Variable: " + id +", no definida, Linea:" + (tokens.get(i)).split("#")[1]);
                                    error="Error semantico. Variable: " + id +", no definida, Linea:" + (tokens.get(i)).split("#")[1];
                                    return cadRecorrido;
                                }                    
                            }
                            
                            
                            
                            //SEMANTICO
                            if(expresion && (acciones[fila][columna].equals("P35") || acciones[fila][columna].equals("P36") || acciones[fila][columna].equals("P38") || acciones[fila][columna].equals("P39"))){
                                cimaPilaAnt = pilaSemantica.pop();
                                cimaPila = pilaSemantica.pop();
                                if(mapeoSemantico[Integer.parseInt(cimaPila)][Integer.parseInt(cimaPilaAnt)].equals("-1")){
                                    System.out.println("Variable: " + idAsignacion +", no coincide con el dato asignado, Linea:" + (tokens.get(i)).split("#")[1]);
                                    error="Error semantico. Variable: " + idAsignacion +", no coincide con el dato asignado, Linea:" + (tokens.get(i)).split("#")[1];
                                    return cadRecorrido;
                                }
                                pilaSemantica.push(mapeoSemantico[Integer.parseInt(cimaPila)][Integer.parseInt(cimaPilaAnt)]);
                                cadRecorridoSemantico+= mostrarPila(pilaSemantica);
                            
                                
                                //Codigointermedio idAsignaciontipoDato
                                switch (acciones[fila][columna]) {
                                    case "P35":
                                        cont-=1;
                                        codigoIntermedio+="V"+idAsignaciontipoDato+(cont-1)+" = "+"V"+idAsignaciontipoDato+(cont-1)+" + "+"V"+idAsignaciontipoDato+(cont)+";\n";
                                        break;
                                    case "P36":
                                        cont-=1;
                                        codigoIntermedio+="V"+idAsignaciontipoDato+(cont-1)+" = "+"V"+idAsignaciontipoDato+(cont-1)+" - "+"V"+idAsignaciontipoDato+(cont)+";\n";
                                        break;
                                    case "P38":
                                        cont-=1;
                                        codigoIntermedio+="V"+idAsignaciontipoDato+(cont-1)+" = "+"V"+idAsignaciontipoDato+(cont-1)+" * "+"V"+idAsignaciontipoDato+(cont)+";\n";
                                        break;
                                    case "P39":
                                        cont-=1;
                                        codigoIntermedio+="V"+idAsignaciontipoDato+(cont-1)+" = "+"V"+idAsignaciontipoDato+(cont-1)+" / "+"V"+idAsignaciontipoDato+(cont)+";\n";
                                        break;
                                }
                            }
                            
                            if(expresion && (acciones[fila][columna].equals("P26") || acciones[fila][columna].equals("P27"))){
                                switch (acciones[fila][columna]) {
                                    case "P9":
                                        codigoIntermedio+="V"+idAsignaciontipoDato+"1 = +V"+idAsignaciontipoDato+"1;\n";
                                        break;
                                    case "P10":
                                        codigoIntermedio+="V"+idAsignaciontipoDato+"1 = -V"+idAsignaciontipoDato+"1;\n";
                                        break;
                                    default:
                                        throw new AssertionError();
                                }                                

                            } 
                            //FIn Intermedio
                            //FinSemantica
                            
                            
                                       
                            //Inicio Codigo Intermedio tipo de dato
                            if( !enRead && (acciones[fila][columna].equals("P4")|| acciones[fila][columna].equals("P5") || acciones[fila][columna].equals("P6") || acciones[fila][columna].equals("P7"))){
                                switch (acciones[fila][columna]) {
                                    case "P4":
                                        codigoIntermedio+="int ";
                                        tipoDato="int ";
                                        break;
                                    case "P5":
                                        codigoIntermedio+="float ";
                                        tipoDato="float ";
                                        break;
                                    case "P6":
                                        codigoIntermedio+="char ";
                                        tipoDato="char ";
                                        break;
                                    case "P7":
                                        codigoIntermedio+="char *";
                                        tipoDato="String ";
                                        break;
                                    default:
                                        throw new AssertionError();
                                }
                                //System.out.println("Entramos a tipos de dato");
                            }
                        //Fin codigo intermedio tipo de dato
                        
                        
                            //Inicio Codigo Intermedio Read                         
                            if( enRead && (acciones[fila][columna].equals("P4")|| acciones[fila][columna].equals("P5") || acciones[fila][columna].equals("P6") || acciones[fila][columna].equals("P7"))){
                                switch (acciones[fila][columna]) {
                                    case "P4":
                                        codigoIntermedio+="\"%d\", &";
                                        pilaSemantica.push("0");
                                        break;
                                    case "P5":
                                        codigoIntermedio+="\"%f\", &";
                                        pilaSemantica.push("1");
                                        break;
                                    case "P6":
                                        codigoIntermedio+="\" %c\", &";
                                        pilaSemantica.push("2");
                                        break;
                                    case "P7":
                                        codigoIntermedio+="\"%s\", ";
                                        pilaSemantica.push("3");
                                        break;
                                    default:
                                        throw new AssertionError();
                                }
                                //System.out.println("Entramos a tipos de dato");
                            }
                        //Fin codigo intermedio Read
                        
                            break;
                        }
                }
                
                //Guardar el nombre del ultimo id de la expresion
                if(expresion && (tokens.get(i)).split("#")[0].equals("id")){                    
                    id = (tokens.get(i)).split("#")[2];
                }                                                
                if(expresion && (tokens.get(i)).split("#")[0].equals("num")){                    
                    num = (tokens.get(i)).split("#")[2];
                }
                if(expresion && (tokens.get(i)).split("#")[0].equals("cad")){                    
                    cad = (tokens.get(i)).split("#")[2];
                }                                                
                if(expresion && (tokens.get(i)).split("#")[0].equals("car")){                    
                    car = (tokens.get(i)).split("#")[2];
                }
                
                if((enWrite || enRead) && (tokens.get(i)).split("#")[0].equals("id")){                    
                    id = (tokens.get(i)).split("#")[2];
                }
                if((enWrite || enRead) && (tokens.get(i)).split("#")[0].equals("cad")){                    
                    cad = (tokens.get(i)).split("#")[2];
                }                 
                    
                tokenAnt=tokens.get(i);
            }while(!encontrado);
        }               
        return cadRecorrido;
    }
    
    
    
    private int col(String car){
        for(int i=0; i<columnas.length;i++)
            if(columnas[i].equals(car))
                return i;        
        return -1;
    }
    
    private int fil(String car){
        for(int i=0; i<filas.length;i++)
            if(filas[i].equals(car))
                return i;        
        return -1;
    }
    
    private String mostrarPila(Stack<String> pila){
        String cadena="";
        if(pila.isEmpty())
            System.out.println("Pila Vacia");
        else
            for(int i=0; i<pila.size(); i++) {
                cadena+=pila.get(i);
                System.out.print(pila.get(i)); 
            }
        System.out.println("");               
        return cadena;
    }

    public boolean isValida() {
        return (valida && nohayerror);
    }
    
    
    
    
    
    private boolean operador(String op){        
        return op=="+" || op=="-" || op=="*" || op=="/";
    }
    
    private boolean mayorPrioridad(String operador1, String operador2){
        int prioridad1 = obtenerPrioridad(operador1);
        int prioridad2 = obtenerPrioridad(operador2);

        return prioridad1 >= prioridad2;
    }
    
        private static int obtenerPrioridad(String operador) {
            switch (operador) {
                case "+":
                case "-":
                    return 1;
                case "*":
                case "/":
                    return 2;
                default:
                    throw new IllegalArgumentException("Operador no válido: " + operador);
            }
        }
}
